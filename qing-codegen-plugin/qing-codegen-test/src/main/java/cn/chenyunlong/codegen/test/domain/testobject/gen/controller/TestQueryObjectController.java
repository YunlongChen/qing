/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.codegen.test.domain.testobject.gen.controller;

import cn.chenyunlong.codegen.test.domain.testobject.gen.creator.TestQueryObjectCreator;
import cn.chenyunlong.codegen.test.domain.testobject.gen.mapper.TestQueryObjectMapper;
import cn.chenyunlong.codegen.test.domain.testobject.gen.query.TestQueryObjectQuery;
import cn.chenyunlong.codegen.test.domain.testobject.gen.request.TestQueryObjectCreateRequest;
import cn.chenyunlong.codegen.test.domain.testobject.gen.request.TestQueryObjectQueryRequest;
import cn.chenyunlong.codegen.test.domain.testobject.gen.request.TestQueryObjectUpdateRequest;
import cn.chenyunlong.codegen.test.domain.testobject.gen.response.TestQueryObjectResponse;
import cn.chenyunlong.codegen.test.domain.testobject.gen.service.ITestQueryObjectService;
import cn.chenyunlong.codegen.test.domain.testobject.gen.updater.TestQueryObjectUpdater;
import cn.chenyunlong.codegen.test.domain.testobject.gen.vo.TestQueryObjectVO;
import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;

import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("testQueryObject/v1")
@RequiredArgsConstructor
public class TestQueryObjectController {
    private final ITestQueryObjectService testQueryObjectService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createTestQueryObject(@RequestBody TestQueryObjectCreateRequest request) {
        TestQueryObjectCreator creator = TestQueryObjectMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(testQueryObjectService.createTestQueryObject(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateTestQueryObject")
    public JsonResult<String> updateTestQueryObject(
            @RequestBody TestQueryObjectUpdateRequest request) {
        TestQueryObjectUpdater updater = TestQueryObjectMapper.INSTANCE.request2Updater(request);
        testQueryObjectService.updateTestQueryObject(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validTestQueryObject(@PathVariable Long id) {
        testQueryObjectService.validTestQueryObject(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidTestQueryObject(@PathVariable Long id) {
        testQueryObjectService.invalidTestQueryObject(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<TestQueryObjectResponse> findById(@PathVariable Long id) {
        TestQueryObjectVO vo = testQueryObjectService.findById(id);
        TestQueryObjectResponse response = TestQueryObjectMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<TestQueryObjectResponse>> findByPage(
            @RequestBody PageRequestWrapper<TestQueryObjectQueryRequest> request) {
        PageRequestWrapper<TestQueryObjectQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(TestQueryObjectMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<TestQueryObjectVO> page = testQueryObjectService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> TestQueryObjectMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
