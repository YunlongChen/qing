// ---Auto Generated by Qing-Generator --
package cn.chenyunlong.qing.domain.attachement.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.jpa.support.domain.BaseEntity;
import cn.chenyunlong.qing.domain.attachement.Attachement;
import cn.chenyunlong.qing.domain.attachement.creator.AttachementCreator;
import cn.chenyunlong.qing.domain.attachement.mapper.AttachementMapper;
import cn.chenyunlong.qing.domain.attachement.query.AttachementQuery;
import cn.chenyunlong.qing.domain.attachement.repository.AttachementRepository;
import cn.chenyunlong.qing.domain.attachement.service.IAttachementService;
import cn.chenyunlong.qing.domain.attachement.updater.AttachementUpdater;
import cn.chenyunlong.qing.domain.attachement.vo.AttachementVO;
import java.lang.Long;
import java.lang.Override;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AttachementServiceImpl implements IAttachementService {
    private final AttachementRepository attachementRepository;

    /**
     * createImpl
     */
    @Override
    public Long createAttachement(AttachementCreator creator) {
        Optional<Attachement> attachement = EntityOperations.doCreate(attachementRepository)
        .create(() -> AttachementMapper.INSTANCE.dtoToEntity(creator))
        .update(Attachement::init)
        .execute();
        return attachement.isPresent() ? attachement.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updateAttachement(AttachementUpdater updater) {
        EntityOperations.doUpdate(attachementRepository)
        .loadById(updater.getId())
        .update(updater::updateAttachement)
        .execute();
    }

    /**
     * valid
     */
    @Override
    public void validAttachement(Long id) {
        EntityOperations.doUpdate(attachementRepository)
        .loadById(id)
        .update(BaseEntity::valid)
        .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidAttachement(Long id) {
        EntityOperations.doUpdate(attachementRepository)
        .loadById(id)
        .update(BaseEntity::invalid)
        .execute();
    }

    /**
     * findById
     */
    @Override
    public AttachementVO findById(Long id) {
        Optional<Attachement> attachement =  attachementRepository.findById(id);
        return new AttachementVO(attachement.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<AttachementVO> findByPage(PageRequestWrapper<AttachementQuery> query) {
        PageRequest pageRequest = PageRequest.of(query.getPage(), query.getPageSize(), Sort.Direction.DESC, "createdAt");
        return attachementRepository.findAll(pageRequest).map(AttachementVO::new);
    }
}
