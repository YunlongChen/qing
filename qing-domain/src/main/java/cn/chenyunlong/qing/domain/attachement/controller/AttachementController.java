// ---Auto Generated by Qing-Generator --
package cn.chenyunlong.qing.domain.attachement.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.attachement.creator.AttachementCreator;
import cn.chenyunlong.qing.domain.attachement.mapper.AttachementMapper;
import cn.chenyunlong.qing.domain.attachement.query.AttachementQuery;
import cn.chenyunlong.qing.domain.attachement.request.AttachementCreateRequest;
import cn.chenyunlong.qing.domain.attachement.request.AttachementQueryRequest;
import cn.chenyunlong.qing.domain.attachement.request.AttachementUpdateRequest;
import cn.chenyunlong.qing.domain.attachement.response.AttachementResponse;
import cn.chenyunlong.qing.domain.attachement.service.IAttachementService;
import cn.chenyunlong.qing.domain.attachement.updater.AttachementUpdater;
import cn.chenyunlong.qing.domain.attachement.vo.AttachementVO;
import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("api/v1/attachement")
@RequiredArgsConstructor
public class AttachementController {
    private final IAttachementService attachementService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createAttachement(@RequestBody AttachementCreateRequest request) {
        AttachementCreator creator = AttachementMapper.INSTANCE.request2Dto(request);return JsonResult.success(attachementService.createAttachement(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateAttachement")
    public JsonResult<String> updateAttachement(@RequestBody AttachementUpdateRequest request) {
        AttachementUpdater updater = AttachementMapper.INSTANCE.request2Updater(request);attachementService.updateAttachement(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validAttachement(@PathVariable Long id) {
        attachementService.validAttachement(id);return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidAttachement(@PathVariable Long id) {
        attachementService.invalidAttachement(id);return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<AttachementResponse> findById(@PathVariable Long id) {
        AttachementVO vo = attachementService.findById(id);AttachementResponse response = AttachementMapper.INSTANCE.vo2CustomResponse(vo);return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("page")
    public JsonResult<PageResult<AttachementResponse>> page(
            @RequestBody PageRequestWrapper<AttachementQueryRequest> request) {
        PageRequestWrapper<AttachementQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(AttachementMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
            wrapper.setPageSize(request.getPageSize());
            wrapper.setPage(request.getPage());
        Page<AttachementVO> page = attachementService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                    page.getContent().stream()
                        .map(AttachementMapper.INSTANCE::vo2CustomResponse)
                        .collect(Collectors.toList()),
                    page.getTotalElements(),
                    page.getSize(),
                    page.getNumber())
            );
    }
}
