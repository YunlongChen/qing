// ---Auto Generated by Qing-Generator --

package cn.chenyunlong.qing.domain.entity.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.BaseJpaService;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.jpa.support.domain.BaseEntity;
import cn.chenyunlong.qing.domain.entity.Entity;
import cn.chenyunlong.qing.domain.entity.creator.EntityCreator;
import cn.chenyunlong.qing.domain.entity.mapper.EntityMapper;
import cn.chenyunlong.qing.domain.entity.query.EntityQuery;
import cn.chenyunlong.qing.domain.entity.repository.EntityRepository;
import cn.chenyunlong.qing.domain.entity.service.IEntityService;
import cn.chenyunlong.qing.domain.entity.updater.EntityUpdater;
import cn.chenyunlong.qing.domain.entity.vo.EntityVO;
import cn.chenyunlong.qing.domain.zan.Zan;
import cn.chenyunlong.qing.domain.zan.repository.ZanRepository;
import jakarta.persistence.criteria.Predicate;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class EntityServiceImpl extends BaseJpaService implements IEntityService {
    private final EntityRepository entityRepository;
    private final ZanRepository zanRepository;

    /**
     * createImpl
     */
    @Override
    public Long createEntity(EntityCreator creator) {
        Optional<Entity> entity = doCreate(entityRepository)
            .create(() -> EntityMapper.INSTANCE.dtoToEntity(creator))
            .update(Entity::init)
            .execute();
        return entity.map(Entity::getId).orElse(0L);
    }

    /**
     * update
     */
    @Override
    public void updateEntity(EntityUpdater updater) {
        doUpdate(entityRepository)
            .loadById(updater.getId())
            .update(updater::updateEntity)
            .execute();
    }

    /**
     * valid
     */
    @Override
    public void validEntity(Long id) {
        EntityOperations.doUpdate(entityRepository)
            .loadById(id)
            .update(BaseEntity::valid)
            .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidEntity(Long id) {
        doUpdate(entityRepository)
            .loadById(id)
            .update(BaseEntity::invalid)
            .execute();
    }

    /**
     * findById
     */
    @Override
    public EntityVO findById(Long id) {
        Optional<Entity> entity = entityRepository.findById(id);
        return new EntityVO(entity.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<EntityVO> findByPage(PageRequestWrapper<EntityQuery> query) {
        PageRequest pageRequest =
            PageRequest.of(query.getPage(), query.getPageSize(), Sort.Direction.DESC, "createdAt");
        return entityRepository.findAll(pageRequest).map(EntityVO::new);
    }


    @Override
    public void updateZanCount(Long entityId) {
        doUpdate(entityRepository)
            .loadById(entityId)
            .update(entity -> {
                Specification<Zan> specification = (root, query, criteriaBuilder) -> {
                    Predicate predicate =
                        criteriaBuilder.equal(root.get("entityId"), entity.getId());
                    return query.where(predicate).getRestriction();
                };
                long retPrdInfoList = zanRepository.count(specification);
                entity.setZanCount(retPrdInfoList);
            })
            .execute();
    }


}
