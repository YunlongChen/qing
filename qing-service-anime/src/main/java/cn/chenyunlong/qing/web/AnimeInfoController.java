/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.web;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.anime.creator.AnimeInfoCreator;
import cn.chenyunlong.qing.domain.anime.anime.mapper.AnimeInfoMapper;
import cn.chenyunlong.qing.domain.anime.anime.query.AnimeInfoQuery;
import cn.chenyunlong.qing.domain.anime.anime.request.AnimeInfoCreateRequest;
import cn.chenyunlong.qing.domain.anime.anime.request.AnimeInfoQueryRequest;
import cn.chenyunlong.qing.domain.anime.anime.request.AnimeInfoUpdateRequest;
import cn.chenyunlong.qing.domain.anime.anime.response.AnimeInfoResponse;
import cn.chenyunlong.qing.domain.anime.anime.service.IAnimeInfoService;
import cn.chenyunlong.qing.domain.anime.anime.updater.AnimeInfoUpdater;
import cn.chenyunlong.qing.domain.anime.anime.vo.AnimeInfoVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("api/v1/anime-info")
@RequiredArgsConstructor
public class AnimeInfoController {
    private final IAnimeInfoService animeInfoService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createAnimeInfo(@RequestBody AnimeInfoCreateRequest request) {
        AnimeInfoCreator creator = AnimeInfoMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(animeInfoService.createAnimeInfo(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateAnimeInfo")
    public JsonResult<String> updateAnimeInfo(@RequestBody AnimeInfoUpdateRequest request) {
        AnimeInfoUpdater updater = AnimeInfoMapper.INSTANCE.request2Updater(request);
        animeInfoService.updateAnimeInfo(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validAnimeInfo(@PathVariable Long id) {
        animeInfoService.validAnimeInfo(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidAnimeInfo(@PathVariable Long id) {
        animeInfoService.invalidAnimeInfo(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<AnimeInfoResponse> findById(@PathVariable Long id) {
        AnimeInfoVO vo = animeInfoService.findById(id);
        AnimeInfoResponse response = AnimeInfoMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<AnimeInfoResponse>> findByPage(
            @RequestBody PageRequestWrapper<AnimeInfoQueryRequest> request) {
        PageRequestWrapper<AnimeInfoQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(AnimeInfoMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<AnimeInfoVO> page = animeInfoService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(AnimeInfoMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
