/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.web;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.attachment.creator.AttachmentCreator;
import cn.chenyunlong.qing.domain.anime.attachment.mapper.AttachmentMapper;
import cn.chenyunlong.qing.domain.anime.attachment.query.AttachmentQuery;
import cn.chenyunlong.qing.domain.anime.attachment.request.AttachmentCreateRequest;
import cn.chenyunlong.qing.domain.anime.attachment.request.AttachmentQueryRequest;
import cn.chenyunlong.qing.domain.anime.attachment.request.AttachmentUpdateRequest;
import cn.chenyunlong.qing.domain.anime.attachment.response.AttachmentResponse;
import cn.chenyunlong.qing.domain.anime.attachment.service.IAttachmentService;
import cn.chenyunlong.qing.domain.anime.attachment.updater.AttachmentUpdater;
import cn.chenyunlong.qing.domain.anime.attachment.vo.AttachmentVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("api/v1/attachment")
@RequiredArgsConstructor
public class AttachmentController {
    private final IAttachmentService attachmentService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createAttachment(@RequestBody AttachmentCreateRequest request) {
        AttachmentCreator creator = AttachmentMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(attachmentService.createAttachment(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateAttachment")
    public JsonResult<String> updateAttachment(@RequestBody AttachmentUpdateRequest request) {
        AttachmentUpdater updater = AttachmentMapper.INSTANCE.request2Updater(request);
        attachmentService.updateAttachment(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validAttachment(@PathVariable Long id) {
        attachmentService.validAttachment(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidAttachment(@PathVariable Long id) {
        attachmentService.invalidAttachment(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<AttachmentResponse> findById(@PathVariable Long id) {
        AttachmentVO vo = attachmentService.findById(id);
        AttachmentResponse response = AttachmentMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<AttachmentResponse>> findByPage(
            @RequestBody PageRequestWrapper<AttachmentQueryRequest> request) {
        PageRequestWrapper<AttachmentQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(AttachmentMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<AttachmentVO> page = attachmentService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(AttachmentMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
