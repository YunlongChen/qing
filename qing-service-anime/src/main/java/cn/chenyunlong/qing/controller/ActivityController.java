/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.activity.creator.ActivityCreator;
import cn.chenyunlong.qing.domain.activity.mapper.ActivityMapper;
import cn.chenyunlong.qing.domain.activity.query.ActivityQuery;
import cn.chenyunlong.qing.domain.activity.request.ActivityCreateRequest;
import cn.chenyunlong.qing.domain.activity.request.ActivityQueryRequest;
import cn.chenyunlong.qing.domain.activity.request.ActivityUpdateRequest;
import cn.chenyunlong.qing.domain.activity.response.ActivityResponse;
import cn.chenyunlong.qing.domain.activity.service.IActivityService;
import cn.chenyunlong.qing.domain.activity.updater.ActivityUpdater;
import cn.chenyunlong.qing.domain.activity.vo.ActivityVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("activity/v1")
@RequiredArgsConstructor
public class ActivityController {
  private final IActivityService activityService;

  /**
   * createRequest
   */
  @PostMapping("createActivity")
  public JsonResult<Long> createActivity(@RequestBody ActivityCreateRequest request) {
    ActivityCreator creator = ActivityMapper.INSTANCE.request2Dto(request);
    return JsonResult.success(activityService.createActivity(creator));
  }

  /**
   * update request
   */
  @PostMapping("updateActivity")
  public JsonResult<String> updateActivity(@RequestBody ActivityUpdateRequest request) {
    ActivityUpdater updater = ActivityMapper.INSTANCE.request2Updater(request);
    activityService.updateActivity(updater);
    return JsonResult.success(CodeEnum.Success.getName());
  }

  /**
   * valid
   */
  @PostMapping("valid/{id}")
  public JsonResult<String> validActivity(@PathVariable Long id) {
    activityService.validActivity(id);
    return JsonResult.success(CodeEnum.Success.getName());
  }

  /**
   * invalid
   */
  @PostMapping("invalid/{id}")
  public JsonResult<String> invalidActivity(@PathVariable Long id) {
    activityService.invalidActivity(id);
    return JsonResult.success(CodeEnum.Success.getName());
  }

  /**
   * findById
   */
  @GetMapping("findById/{id}")
  public JsonResult<ActivityResponse> findById(@PathVariable Long id) {
    ActivityVO vo = activityService.findById(id);
    ActivityResponse response = ActivityMapper.INSTANCE.vo2CustomResponse(vo);
    return JsonResult.success(response);
  }

  /**
   * findByPage request
   */
  @PostMapping("findByPage")
  public JsonResult<PageResult<ActivityResponse>> findByPage(
          @RequestBody PageRequestWrapper<ActivityQueryRequest> request) {
    PageRequestWrapper<ActivityQuery> wrapper = new PageRequestWrapper<>();
    wrapper.setBean(ActivityMapper.INSTANCE.request2Query(request.getBean()));
    wrapper.setSorts(request.getSorts());
    wrapper.setPageSize(request.getPageSize());
    wrapper.setPage(request.getPage());
    Page<ActivityVO> page = activityService.findByPage(wrapper);
    return JsonResult.success(
            PageResult.of(
                    page.getContent().stream()
                            .map(vo -> ActivityMapper.INSTANCE.vo2CustomResponse(vo))
                            .collect(Collectors.toList()),
                    page.getTotalElements(),
                    page.getSize(),
                    page.getNumber())
    );
  }
}
