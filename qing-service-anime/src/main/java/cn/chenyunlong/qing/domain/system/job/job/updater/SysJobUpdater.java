// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.system.job.job.updater;

import cn.chenyunlong.qing.domain.system.job.job.SysJob;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;

import java.util.Optional;

@Schema
@Data
public class SysJobUpdater {
    @Schema(
            title = "JobId",
            description = "jobId"
    )
    private Long jobId;

    @Schema(
            title = "JobName",
            description = "jobName"
    )
    private String jobName;

    @Schema(
            title = "JobGroup",
            description = "jobGroup"
    )
    private String jobGroup;

    @Schema(
            title = "InvokeTarget",
            description = "invokeTarget"
    )
    private String invokeTarget;

    @Schema(
            title = "CronExpression",
            description = "cronExpression"
    )
    private String cronExpression;

    @Schema(
            title = "MisfirePolicy",
            description = "misfirePolicy"
    )
    private String misfirePolicy;

    @Schema(
            title = "Concurrent",
            description = "concurrent"
    )
    private String concurrent;

    @Schema(
            title = "Status",
            description = "status"
    )
    private String status;

    private Long id;

    public void updateSysJob(SysJob param) {
        Optional.ofNullable(getJobId()).ifPresent(v -> param.setJobId(v));
        Optional.ofNullable(getJobName()).ifPresent(v -> param.setJobName(v));
        Optional.ofNullable(getJobGroup()).ifPresent(v -> param.setJobGroup(v));
        Optional.ofNullable(getInvokeTarget()).ifPresent(v -> param.setInvokeTarget(v));
        Optional.ofNullable(getCronExpression()).ifPresent(v -> param.setCronExpression(v));
        Optional.ofNullable(getMisfirePolicy()).ifPresent(v -> param.setMisfirePolicy(v));
        Optional.ofNullable(getConcurrent()).ifPresent(v -> param.setConcurrent(v));
        Optional.ofNullable(getStatus()).ifPresent(v -> param.setStatus(v));
    }
}
