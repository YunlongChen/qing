// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.permission.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.jpa.support.domain.BaseEntity;
import cn.chenyunlong.qing.domain.permission.Permission;
import cn.chenyunlong.qing.domain.permission.creator.PermissionCreator;
import cn.chenyunlong.qing.domain.permission.mapper.PermissionMapper;
import cn.chenyunlong.qing.domain.permission.query.PermissionQuery;
import cn.chenyunlong.qing.domain.permission.repository.PermissionRepository;
import cn.chenyunlong.qing.domain.permission.service.IPermissionService;
import cn.chenyunlong.qing.domain.permission.updater.PermissionUpdater;
import cn.chenyunlong.qing.domain.permission.vo.PermissionVO;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.stream.Collectors;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class PermissionServiceImpl implements IPermissionService {
    private final PermissionRepository permissionRepository;

    /**
     * createImpl
     */
    @Override
    public Long createPermission(PermissionCreator creator) {
        Optional<Permission> permission = EntityOperations.doCreate(permissionRepository)
                .create(() -> PermissionMapper.INSTANCE.dtoToEntity(creator))
                .update(Permission::init)
                .execute();
        return permission.isPresent() ? permission.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updatePermission(PermissionUpdater updater) {
        EntityOperations.doUpdate(permissionRepository)
                .loadById(updater.getId())
                .update(updater::updatePermission)
                .execute();
    }

    /**
     * valid
     */
    @Override
    public void validPermission(Long id) {
        EntityOperations.doUpdate(permissionRepository)
                .loadById(id)
                .update(BaseEntity::valid)
                .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidPermission(Long id) {
        EntityOperations.doUpdate(permissionRepository)
                .loadById(id)
                .update(BaseEntity::invalid)
                .execute();
    }

    /**
     * findById
     */
    @Override
    public PermissionVO findById(Long id) {
        Optional<Permission> permission = permissionRepository.findById(id);
        return new PermissionVO(permission.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<PermissionVO> findByPage(PageRequestWrapper<PermissionQuery> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<Permission> page = permissionRepository.findAll(booleanBuilder,
                PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                        Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent()
                .stream().map(PermissionVO::new)
                .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }
}
