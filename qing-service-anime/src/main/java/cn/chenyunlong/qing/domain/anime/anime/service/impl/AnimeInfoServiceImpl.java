// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.anime.anime.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.qing.domain.anime.anime.AnimeInfo;
import cn.chenyunlong.qing.domain.anime.anime.creator.AnimeInfoCreator;
import cn.chenyunlong.qing.domain.anime.anime.query.AnimeInfoQuery;
import cn.chenyunlong.qing.domain.anime.anime.repository.AnimeInfoRepository;
import cn.chenyunlong.qing.domain.anime.anime.service.IAnimeInfoService;
import cn.chenyunlong.qing.domain.anime.anime.updater.AnimeInfoUpdater;
import cn.chenyunlong.qing.domain.anime.anime.vo.AnimeInfoVO;
import cn.chenyunlong.qing.infrastructure.domain.BaseEntity;
import cn.hutool.core.bean.BeanUtil;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.stream.Collectors;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AnimeInfoServiceImpl implements IAnimeInfoService {
    private final AnimeInfoRepository animeInfoRepository;

    /**
     * createImpl
     */
    @Override
    public Long createAnimeInfo(AnimeInfoCreator creator) {

        // todo 这里暂时不能使用mapper映射
        Optional<AnimeInfo> animeInfo = EntityOperations.doCreate(animeInfoRepository)
                .create(() -> BeanUtil.copyProperties(creator, AnimeInfo.class))
                .update(BaseEntity::init)
                .execute();
        return animeInfo.isPresent() ? animeInfo.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updateAnimeInfo(AnimeInfoUpdater updater) {
        EntityOperations.doUpdate(animeInfoRepository)
                .loadById(updater.getId())
                .update(e -> updater.updateAnimeInfo(e))
                .execute();
    }

    /**
     * valid
     */
    @Override
    public void validAnimeInfo(Long id) {
        EntityOperations.doUpdate(animeInfoRepository)
                .loadById(id)
                .update(e -> e.valid())
                .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidAnimeInfo(Long id) {
        EntityOperations.doUpdate(animeInfoRepository)
                .loadById(id)
                .update(e -> e.invalid())
                .execute();
    }

    /**
     * findById
     */
    @Override
    public AnimeInfoVO findById(Long id) {
        Optional<AnimeInfo> animeInfo = animeInfoRepository.findById(id);
        return new AnimeInfoVO(animeInfo.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<AnimeInfoVO> findByPage(PageRequestWrapper<AnimeInfoQuery> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<AnimeInfo> page = animeInfoRepository.findAll(booleanBuilder,
                PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                        Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent()
                .stream().map(AnimeInfoVO::new)
                .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }
}
