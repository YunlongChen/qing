/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.system.job.job.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonObject;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.system.job.job.creator.SysJobCreator;
import cn.chenyunlong.qing.domain.system.job.job.mapper.SysJobMapper;
import cn.chenyunlong.qing.domain.system.job.job.query.SysJobQuery;
import cn.chenyunlong.qing.domain.system.job.job.request.SysJobCreateRequest;
import cn.chenyunlong.qing.domain.system.job.job.request.SysJobQueryRequest;
import cn.chenyunlong.qing.domain.system.job.job.request.SysJobUpdateRequest;
import cn.chenyunlong.qing.domain.system.job.job.response.SysJobResponse;
import cn.chenyunlong.qing.domain.system.job.job.service.ISysJobService;
import cn.chenyunlong.qing.domain.system.job.job.updater.SysJobUpdater;
import cn.chenyunlong.qing.domain.system.job.job.vo.SysJobVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("sysJob/v1")
@RequiredArgsConstructor
public class SysJobController {
    private final ISysJobService sysJobService;

    /**
     * createRequest
     */
    @PostMapping("createSysJob")
    public JsonObject<Long> createSysJob(@RequestBody SysJobCreateRequest request) {
        SysJobCreator creator = SysJobMapper.INSTANCE.request2Dto(request);
        return JsonObject.success(sysJobService.createSysJob(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateSysJob")
    public JsonObject<String> updateSysJob(@RequestBody SysJobUpdateRequest request) {
        SysJobUpdater updater = SysJobMapper.INSTANCE.request2Updater(request);
        sysJobService.updateSysJob(updater);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonObject<String> validSysJob(@PathVariable Long id) {
        sysJobService.validSysJob(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonObject<String> invalidSysJob(@PathVariable Long id) {
        sysJobService.invalidSysJob(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonObject<SysJobResponse> findById(@PathVariable Long id) {
        SysJobVO vo = sysJobService.findById(id);
        SysJobResponse response = SysJobMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonObject.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonObject<PageResult<SysJobResponse>> findByPage(
            @RequestBody PageRequestWrapper<SysJobQueryRequest> request) {
        PageRequestWrapper<SysJobQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(SysJobMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<SysJobVO> page = sysJobService.findByPage(wrapper);
        return JsonObject.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> SysJobMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
