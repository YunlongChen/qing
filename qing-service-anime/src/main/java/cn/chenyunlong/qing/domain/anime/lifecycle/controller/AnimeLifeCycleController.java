/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.anime.lifecycle.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonObject;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.lifecycle.creator.AnimeLifeCycleCreator;
import cn.chenyunlong.qing.domain.anime.lifecycle.mapper.AnimeLifeCycleMapper;
import cn.chenyunlong.qing.domain.anime.lifecycle.query.AnimeLifeCycleQuery;
import cn.chenyunlong.qing.domain.anime.lifecycle.request.AnimeLifeCycleCreateRequest;
import cn.chenyunlong.qing.domain.anime.lifecycle.request.AnimeLifeCycleQueryRequest;
import cn.chenyunlong.qing.domain.anime.lifecycle.request.AnimeLifeCycleUpdateRequest;
import cn.chenyunlong.qing.domain.anime.lifecycle.response.AnimeLifeCycleResponse;
import cn.chenyunlong.qing.domain.anime.lifecycle.service.IAnimeLifeCycleService;
import cn.chenyunlong.qing.domain.anime.lifecycle.updater.AnimeLifeCycleUpdater;
import cn.chenyunlong.qing.domain.anime.lifecycle.vo.AnimeLifeCycleVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("animeLifeCycle/v1")
@RequiredArgsConstructor
public class AnimeLifeCycleController {
    private final IAnimeLifeCycleService animeLifeCycleService;

    /**
     * createRequest
     */
    @PostMapping("createAnimeLifeCycle")
    public JsonObject<Long> createAnimeLifeCycle(@RequestBody AnimeLifeCycleCreateRequest request) {
        AnimeLifeCycleCreator creator = AnimeLifeCycleMapper.INSTANCE.request2Dto(request);
        return JsonObject.success(animeLifeCycleService.createAnimeLifeCycle(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateAnimeLifeCycle")
    public JsonObject<String> updateAnimeLifeCycle(@RequestBody AnimeLifeCycleUpdateRequest request) {
        AnimeLifeCycleUpdater updater = AnimeLifeCycleMapper.INSTANCE.request2Updater(request);
        animeLifeCycleService.updateAnimeLifeCycle(updater);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonObject<String> validAnimeLifeCycle(@PathVariable Long id) {
        animeLifeCycleService.validAnimeLifeCycle(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonObject<String> invalidAnimeLifeCycle(@PathVariable Long id) {
        animeLifeCycleService.invalidAnimeLifeCycle(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonObject<AnimeLifeCycleResponse> findById(@PathVariable Long id) {
        AnimeLifeCycleVO vo = animeLifeCycleService.findById(id);
        AnimeLifeCycleResponse response = AnimeLifeCycleMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonObject.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonObject<PageResult<AnimeLifeCycleResponse>> findByPage(
            @RequestBody PageRequestWrapper<AnimeLifeCycleQueryRequest> request) {
        PageRequestWrapper<AnimeLifeCycleQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(AnimeLifeCycleMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<AnimeLifeCycleVO> page = animeLifeCycleService.findByPage(wrapper);
        return JsonObject.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(AnimeLifeCycleMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
