/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.anime.comment.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.comment.creator.CommentCreator;
import cn.chenyunlong.qing.domain.anime.comment.mapper.CommentMapper;
import cn.chenyunlong.qing.domain.anime.comment.query.CommentQuery;
import cn.chenyunlong.qing.domain.anime.comment.request.CommentCreateRequest;
import cn.chenyunlong.qing.domain.anime.comment.request.CommentQueryRequest;
import cn.chenyunlong.qing.domain.anime.comment.request.CommentUpdateRequest;
import cn.chenyunlong.qing.domain.anime.comment.response.CommentResponse;
import cn.chenyunlong.qing.domain.anime.comment.service.ICommentService;
import cn.chenyunlong.qing.domain.anime.comment.updater.CommentUpdater;
import cn.chenyunlong.qing.domain.anime.comment.vo.CommentVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("api/v1/comment")
@RequiredArgsConstructor
public class CommentController {
    private final ICommentService commentService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createComment(@RequestBody CommentCreateRequest request) {
        CommentCreator creator = CommentMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(commentService.createComment(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateComment")
    public JsonResult<String> updateComment(@RequestBody CommentUpdateRequest request) {
        CommentUpdater updater = CommentMapper.INSTANCE.request2Updater(request);
        commentService.updateComment(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validComment(@PathVariable Long id) {
        commentService.validComment(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidComment(@PathVariable Long id) {
        commentService.invalidComment(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<CommentResponse> findById(@PathVariable Long id) {
        CommentVO vo = commentService.findById(id);
        CommentResponse response = CommentMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<CommentResponse>> findByPage(
            @RequestBody PageRequestWrapper<CommentQueryRequest> request) {
        PageRequestWrapper<CommentQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(CommentMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<CommentVO> page = commentService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(CommentMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
