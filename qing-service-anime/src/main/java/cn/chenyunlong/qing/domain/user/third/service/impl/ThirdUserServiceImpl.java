// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.user.third.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.jpa.support.domain.BaseEntity;
import cn.chenyunlong.qing.domain.user.third.ThirdUser;
import cn.chenyunlong.qing.domain.user.third.creator.ThirdUserCreator;
import cn.chenyunlong.qing.domain.user.third.mapper.ThirdUserMapper;
import cn.chenyunlong.qing.domain.user.third.query.ThirdUserQuery;
import cn.chenyunlong.qing.domain.user.third.repository.ThirdUserRepository;
import cn.chenyunlong.qing.domain.user.third.service.IThirdUserService;
import cn.chenyunlong.qing.domain.user.third.updater.ThirdUserUpdater;
import cn.chenyunlong.qing.domain.user.third.vo.ThirdUserVO;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.stream.Collectors;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class ThirdUserServiceImpl implements IThirdUserService {
    private final ThirdUserRepository thirdUserRepository;

    /**
     * createImpl
     */
    @Override
    public Long createThirdUser(ThirdUserCreator creator) {
        Optional<ThirdUser> thirdUser = EntityOperations.doCreate(thirdUserRepository)
                .create(() -> ThirdUserMapper.INSTANCE.dtoToEntity(creator))
                .update(ThirdUser::init)
                .execute();
        return thirdUser.isPresent() ? thirdUser.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updateThirdUser(ThirdUserUpdater updater) {
        EntityOperations.doUpdate(thirdUserRepository)
                .loadById(updater.getId())
                .update(updater::updateThirdUser)
                .execute();
    }

    /**
     * valid
     */
    @Override
    public void validThirdUser(Long id) {
        EntityOperations.doUpdate(thirdUserRepository)
                .loadById(id)
                .update(BaseEntity::valid)
                .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidThirdUser(Long id) {
        EntityOperations.doUpdate(thirdUserRepository)
                .loadById(id)
                .update(BaseEntity::invalid)
                .execute();
    }

    /**
     * findById
     */
    @Override
    public ThirdUserVO findById(Long id) {
        Optional<ThirdUser> thirdUser = thirdUserRepository.findById(id);
        return new ThirdUserVO(thirdUser.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<ThirdUserVO> findByPage(PageRequestWrapper<ThirdUserQuery> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<ThirdUser> page = thirdUserRepository.findAll(booleanBuilder,
                PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                        Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent()
                .stream().map(ThirdUserVO::new)
                .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }
}
