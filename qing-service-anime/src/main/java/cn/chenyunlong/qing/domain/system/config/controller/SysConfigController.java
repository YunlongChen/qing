/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.system.config.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.system.config.creator.SysConfigCreator;
import cn.chenyunlong.qing.domain.system.config.mapper.SysConfigMapper;
import cn.chenyunlong.qing.domain.system.config.query.SysConfigQuery;
import cn.chenyunlong.qing.domain.system.config.request.SysConfigCreateRequest;
import cn.chenyunlong.qing.domain.system.config.request.SysConfigQueryRequest;
import cn.chenyunlong.qing.domain.system.config.request.SysConfigUpdateRequest;
import cn.chenyunlong.qing.domain.system.config.response.SysConfigResponse;
import cn.chenyunlong.qing.domain.system.config.service.ISysConfigService;
import cn.chenyunlong.qing.domain.system.config.updater.SysConfigUpdater;
import cn.chenyunlong.qing.domain.system.config.vo.SysConfigVO;

import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("sysConfig/v1")
@RequiredArgsConstructor
public class SysConfigController {
    private final ISysConfigService sysConfigService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createSysConfig(@RequestBody SysConfigCreateRequest request) {
        SysConfigCreator creator = SysConfigMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(sysConfigService.createSysConfig(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateSysConfig")
    public JsonResult<String> updateSysConfig(@RequestBody SysConfigUpdateRequest request) {
        SysConfigUpdater updater = SysConfigMapper.INSTANCE.request2Updater(request);
        sysConfigService.updateSysConfig(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validSysConfig(@PathVariable Long id) {
        sysConfigService.validSysConfig(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidSysConfig(@PathVariable Long id) {
        sysConfigService.invalidSysConfig(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<SysConfigResponse> findById(@PathVariable Long id) {
        SysConfigVO vo = sysConfigService.findById(id);
        SysConfigResponse response = SysConfigMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<SysConfigResponse>> findByPage(
            @RequestBody PageRequestWrapper<SysConfigQueryRequest> request) {
        PageRequestWrapper<SysConfigQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(SysConfigMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<SysConfigVO> page = sysConfigService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> SysConfigMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
