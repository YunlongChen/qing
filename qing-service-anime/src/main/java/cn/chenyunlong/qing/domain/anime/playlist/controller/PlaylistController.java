// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.anime.playlist.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.playlist.creator.PlaylistCreator;
import cn.chenyunlong.qing.domain.anime.playlist.mapper.PlaylistMapper;
import cn.chenyunlong.qing.domain.anime.playlist.query.PlaylistQuery;
import cn.chenyunlong.qing.domain.anime.playlist.request.PlaylistCreateRequest;
import cn.chenyunlong.qing.domain.anime.playlist.request.PlaylistQueryRequest;
import cn.chenyunlong.qing.domain.anime.playlist.request.PlaylistUpdateRequest;
import cn.chenyunlong.qing.domain.anime.playlist.response.PlaylistResponse;
import cn.chenyunlong.qing.domain.anime.playlist.service.IPlaylistService;
import cn.chenyunlong.qing.domain.anime.playlist.updater.PlaylistUpdater;
import cn.chenyunlong.qing.domain.anime.playlist.vo.PlaylistVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("playlist/v1")
@RequiredArgsConstructor
public class PlaylistController {
    private final IPlaylistService playlistService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createPlaylist(@RequestBody PlaylistCreateRequest request) {
        PlaylistCreator creator = PlaylistMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(playlistService.createPlaylist(creator));
    }

    /**
     * update request
     */
    @PostMapping("updatePlaylist")
    public JsonResult<String> updatePlaylist(@RequestBody PlaylistUpdateRequest request) {
        PlaylistUpdater updater = PlaylistMapper.INSTANCE.request2Updater(request);
        playlistService.updatePlaylist(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validPlaylist(@PathVariable Long id) {
        playlistService.validPlaylist(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidPlaylist(@PathVariable Long id) {
        playlistService.invalidPlaylist(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<PlaylistResponse> findById(@PathVariable Long id) {
        PlaylistVO vo = playlistService.findById(id);
        PlaylistResponse response = PlaylistMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<PlaylistResponse>> findByPage(
            @RequestBody PageRequestWrapper<PlaylistQueryRequest> request) {
        PageRequestWrapper<PlaylistQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(PlaylistMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<PlaylistVO> page = playlistService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(PlaylistMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
