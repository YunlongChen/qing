// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.anime.type.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.type.creator.AnimeTypeCreator;
import cn.chenyunlong.qing.domain.anime.type.mapper.AnimeTypeMapper;
import cn.chenyunlong.qing.domain.anime.type.query.AnimeTypeQuery;
import cn.chenyunlong.qing.domain.anime.type.request.AnimeTypeCreateRequest;
import cn.chenyunlong.qing.domain.anime.type.request.AnimeTypeQueryRequest;
import cn.chenyunlong.qing.domain.anime.type.request.AnimeTypeUpdateRequest;
import cn.chenyunlong.qing.domain.anime.type.response.AnimeTypeResponse;
import cn.chenyunlong.qing.domain.anime.type.service.IAnimeTypeService;
import cn.chenyunlong.qing.domain.anime.type.updater.AnimeTypeUpdater;
import cn.chenyunlong.qing.domain.anime.type.vo.AnimeTypeVO;

import java.lang.Long;
import java.lang.String;
import java.util.stream.Collectors;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("animeType/v1")
@RequiredArgsConstructor
public class AnimeTypeController {
    private final IAnimeTypeService animeTypeService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createAnimeType(@RequestBody AnimeTypeCreateRequest request) {
        AnimeTypeCreator creator = AnimeTypeMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(animeTypeService.createAnimeType(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateAnimeType")
    public JsonResult<String> updateAnimeType(@RequestBody AnimeTypeUpdateRequest request) {
        AnimeTypeUpdater updater = AnimeTypeMapper.INSTANCE.request2Updater(request);
        animeTypeService.updateAnimeType(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validAnimeType(@PathVariable Long id) {
        animeTypeService.validAnimeType(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidAnimeType(@PathVariable Long id) {
        animeTypeService.invalidAnimeType(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<AnimeTypeResponse> findById(@PathVariable Long id) {
        AnimeTypeVO vo = animeTypeService.findById(id);
        AnimeTypeResponse response = AnimeTypeMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<AnimeTypeResponse>> findByPage(
            @RequestBody PageRequestWrapper<AnimeTypeQueryRequest> request) {
        PageRequestWrapper<AnimeTypeQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(AnimeTypeMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<AnimeTypeVO> page = animeTypeService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(AnimeTypeMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
