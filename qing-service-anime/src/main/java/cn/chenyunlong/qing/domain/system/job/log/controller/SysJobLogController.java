// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.system.job.log.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.system.job.log.creator.SysJobLogCreator;
import cn.chenyunlong.qing.domain.system.job.log.mapper.SysJobLogMapper;
import cn.chenyunlong.qing.domain.system.job.log.query.SysJobLogQuery;
import cn.chenyunlong.qing.domain.system.job.log.request.SysJobLogCreateRequest;
import cn.chenyunlong.qing.domain.system.job.log.request.SysJobLogQueryRequest;
import cn.chenyunlong.qing.domain.system.job.log.request.SysJobLogUpdateRequest;
import cn.chenyunlong.qing.domain.system.job.log.response.SysJobLogResponse;
import cn.chenyunlong.qing.domain.system.job.log.service.ISysJobLogService;
import cn.chenyunlong.qing.domain.system.job.log.updater.SysJobLogUpdater;
import cn.chenyunlong.qing.domain.system.job.log.vo.SysJobLogVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("sysJobLog/v1")
@RequiredArgsConstructor
public class SysJobLogController {
    private final ISysJobLogService sysJobLogService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createSysJobLog(@RequestBody SysJobLogCreateRequest request) {
        SysJobLogCreator creator = SysJobLogMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(sysJobLogService.createSysJobLog(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateSysJobLog")
    public JsonResult<String> updateSysJobLog(@RequestBody SysJobLogUpdateRequest request) {
        SysJobLogUpdater updater = SysJobLogMapper.INSTANCE.request2Updater(request);
        sysJobLogService.updateSysJobLog(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validSysJobLog(@PathVariable Long id) {
        sysJobLogService.validSysJobLog(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidSysJobLog(@PathVariable Long id) {
        sysJobLogService.invalidSysJobLog(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<SysJobLogResponse> findById(@PathVariable Long id) {
        SysJobLogVO vo = sysJobLogService.findById(id);
        SysJobLogResponse response = SysJobLogMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<SysJobLogResponse>> findByPage(
            @RequestBody PageRequestWrapper<SysJobLogQueryRequest> request) {
        PageRequestWrapper<SysJobLogQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(SysJobLogMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<SysJobLogVO> page = sysJobLogService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> SysJobLogMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
