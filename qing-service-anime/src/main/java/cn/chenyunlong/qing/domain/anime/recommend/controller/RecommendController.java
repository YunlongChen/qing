// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.anime.recommend.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonObject;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.recommend.creator.RecommendCreator;
import cn.chenyunlong.qing.domain.anime.recommend.mapper.RecommendMapper;
import cn.chenyunlong.qing.domain.anime.recommend.query.RecommendQuery;
import cn.chenyunlong.qing.domain.anime.recommend.request.RecommendCreateRequest;
import cn.chenyunlong.qing.domain.anime.recommend.request.RecommendQueryRequest;
import cn.chenyunlong.qing.domain.anime.recommend.request.RecommendUpdateRequest;
import cn.chenyunlong.qing.domain.anime.recommend.response.RecommendResponse;
import cn.chenyunlong.qing.domain.anime.recommend.service.IRecommendService;
import cn.chenyunlong.qing.domain.anime.recommend.updater.RecommendUpdater;
import cn.chenyunlong.qing.domain.anime.recommend.vo.RecommendVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("recommend/v1")
@RequiredArgsConstructor
public class RecommendController {
    private final IRecommendService recommendService;

    /**
     * createRequest
     */
    @PostMapping("createRecommend")
    public JsonObject<Long> createRecommend(@RequestBody RecommendCreateRequest request) {
        RecommendCreator creator = RecommendMapper.INSTANCE.request2Dto(request);
        return JsonObject.success(recommendService.createRecommend(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateRecommend")
    public JsonObject<String> updateRecommend(@RequestBody RecommendUpdateRequest request) {
        RecommendUpdater updater = RecommendMapper.INSTANCE.request2Updater(request);
        recommendService.updateRecommend(updater);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonObject<String> validRecommend(@PathVariable Long id) {
        recommendService.validRecommend(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonObject<String> invalidRecommend(@PathVariable Long id) {
        recommendService.invalidRecommend(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonObject<RecommendResponse> findById(@PathVariable Long id) {
        RecommendVO vo = recommendService.findById(id);
        RecommendResponse response = RecommendMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonObject.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonObject<PageResult<RecommendResponse>> findByPage(
            @RequestBody PageRequestWrapper<RecommendQueryRequest> request) {
        PageRequestWrapper<RecommendQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(RecommendMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<RecommendVO> page = recommendService.findByPage(wrapper);
        return JsonObject.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> RecommendMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
