// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.anime.episode.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonObject;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.anime.episode.creator.EpisodeCreator;
import cn.chenyunlong.qing.domain.anime.episode.mapper.EpisodeMapper;
import cn.chenyunlong.qing.domain.anime.episode.query.EpisodeQuery;
import cn.chenyunlong.qing.domain.anime.episode.request.EpisodeCreateRequest;
import cn.chenyunlong.qing.domain.anime.episode.request.EpisodeQueryRequest;
import cn.chenyunlong.qing.domain.anime.episode.request.EpisodeUpdateRequest;
import cn.chenyunlong.qing.domain.anime.episode.response.EpisodeResponse;
import cn.chenyunlong.qing.domain.anime.episode.service.IEpisodeService;
import cn.chenyunlong.qing.domain.anime.episode.updater.EpisodeUpdater;
import cn.chenyunlong.qing.domain.anime.episode.vo.EpisodeVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("episode/v1")
@RequiredArgsConstructor
public class EpisodeController {
    private final IEpisodeService episodeService;

    /**
     * createRequest
     */
    @PostMapping("createEpisode")
    public JsonObject<Long> createEpisode(@RequestBody EpisodeCreateRequest request) {
        EpisodeCreator creator = EpisodeMapper.INSTANCE.request2Dto(request);
        return JsonObject.success(episodeService.createEpisode(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateEpisode")
    public JsonObject<String> updateEpisode(@RequestBody EpisodeUpdateRequest request) {
        EpisodeUpdater updater = EpisodeMapper.INSTANCE.request2Updater(request);
        episodeService.updateEpisode(updater);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonObject<String> validEpisode(@PathVariable Long id) {
        episodeService.validEpisode(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonObject<String> invalidEpisode(@PathVariable Long id) {
        episodeService.invalidEpisode(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonObject<EpisodeResponse> findById(@PathVariable Long id) {
        EpisodeVO vo = episodeService.findById(id);
        EpisodeResponse response = EpisodeMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonObject.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonObject<PageResult<EpisodeResponse>> findByPage(
            @RequestBody PageRequestWrapper<EpisodeQueryRequest> request) {
        PageRequestWrapper<EpisodeQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(EpisodeMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<EpisodeVO> page = episodeService.findByPage(wrapper);
        return JsonObject.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(EpisodeMapper.INSTANCE::vo2CustomResponse)
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
