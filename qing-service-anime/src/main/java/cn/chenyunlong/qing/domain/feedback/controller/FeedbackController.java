// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.feedback.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonObject;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.feedback.creator.FeedbackCreator;
import cn.chenyunlong.qing.domain.feedback.mapper.FeedbackMapper;
import cn.chenyunlong.qing.domain.feedback.query.FeedbackQuery;
import cn.chenyunlong.qing.domain.feedback.request.FeedbackCreateRequest;
import cn.chenyunlong.qing.domain.feedback.request.FeedbackQueryRequest;
import cn.chenyunlong.qing.domain.feedback.request.FeedbackUpdateRequest;
import cn.chenyunlong.qing.domain.feedback.response.FeedbackResponse;
import cn.chenyunlong.qing.domain.feedback.service.IFeedbackService;
import cn.chenyunlong.qing.domain.feedback.updater.FeedbackUpdater;
import cn.chenyunlong.qing.domain.feedback.vo.FeedbackVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("feedback/v1")
@RequiredArgsConstructor
public class FeedbackController {
    private final IFeedbackService feedbackService;

    /**
     * createRequest
     */
    @PostMapping("createFeedback")
    public JsonObject<Long> createFeedback(@RequestBody FeedbackCreateRequest request) {
        FeedbackCreator creator = FeedbackMapper.INSTANCE.request2Dto(request);
        return JsonObject.success(feedbackService.createFeedback(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateFeedback")
    public JsonObject<String> updateFeedback(@RequestBody FeedbackUpdateRequest request) {
        FeedbackUpdater updater = FeedbackMapper.INSTANCE.request2Updater(request);
        feedbackService.updateFeedback(updater);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonObject<String> validFeedback(@PathVariable Long id) {
        feedbackService.validFeedback(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonObject<String> invalidFeedback(@PathVariable Long id) {
        feedbackService.invalidFeedback(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonObject<FeedbackResponse> findById(@PathVariable Long id) {
        FeedbackVO vo = feedbackService.findById(id);
        FeedbackResponse response = FeedbackMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonObject.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonObject<PageResult<FeedbackResponse>> findByPage(
            @RequestBody PageRequestWrapper<FeedbackQueryRequest> request) {
        PageRequestWrapper<FeedbackQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(FeedbackMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<FeedbackVO> page = feedbackService.findByPage(wrapper);
        return JsonObject.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> FeedbackMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
