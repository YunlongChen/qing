// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.anime.episode.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.qing.domain.anime.episode.creator.PlaylistCreator;
import cn.chenyunlong.qing.domain.anime.episode.mapper.PlaylistMapper;
import cn.chenyunlong.qing.domain.anime.episode.query.PlaylistQuery;
import cn.chenyunlong.qing.domain.anime.episode.repository.PlaylistRepository;
import cn.chenyunlong.qing.domain.anime.episode.service.IPlaylistService;
import cn.chenyunlong.qing.domain.anime.episode.updater.PlaylistUpdater;
import cn.chenyunlong.qing.domain.anime.episode.vo.PlaylistVO;
import cn.chenyunlong.qing.domain.anime.playlist.Playlist;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.stream.Collectors;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class PlaylistServiceImpl implements IPlaylistService {
    private final PlaylistRepository playlistRepository;

    /**
     * createImpl
     */
    @Override
    public Long createPlaylist(PlaylistCreator creator) {
        Optional<Playlist> playlist = EntityOperations.doCreate(playlistRepository)
                .create(() -> PlaylistMapper.INSTANCE.dtoToEntity(creator))
                .update(e -> e.init())
                .execute();
        return playlist.isPresent() ? playlist.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updatePlaylist(PlaylistUpdater updater) {
        EntityOperations.doUpdate(playlistRepository)
                .loadById(updater.getId())
                .update(e -> updater.updatePlaylist(e))
                .execute();
    }

    /**
     * valid
     */
    @Override
    public void validPlaylist(Long id) {
        EntityOperations.doUpdate(playlistRepository)
                .loadById(id)
                .update(e -> e.valid())
                .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidPlaylist(Long id) {
        EntityOperations.doUpdate(playlistRepository)
                .loadById(id)
                .update(e -> e.invalid())
                .execute();
    }

    /**
     * findById
     */
    @Override
    public PlaylistVO findById(Long id) {
        Optional<Playlist> playlist = playlistRepository.findById(id);
        return new PlaylistVO(playlist.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<PlaylistVO> findByPage(PageRequestWrapper<PlaylistQuery> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<Playlist> page = playlistRepository.findAll(booleanBuilder,
                PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                        Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent()
                .stream().map(PlaylistVO::new)
                .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }
}
