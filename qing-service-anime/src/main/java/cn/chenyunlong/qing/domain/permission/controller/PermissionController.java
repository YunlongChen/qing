/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.permission.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonObject;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.permission.creator.PermissionCreator;
import cn.chenyunlong.qing.domain.permission.mapper.PermissionMapper;
import cn.chenyunlong.qing.domain.permission.query.PermissionQuery;
import cn.chenyunlong.qing.domain.permission.request.PermissionCreateRequest;
import cn.chenyunlong.qing.domain.permission.request.PermissionQueryRequest;
import cn.chenyunlong.qing.domain.permission.request.PermissionUpdateRequest;
import cn.chenyunlong.qing.domain.permission.response.PermissionResponse;
import cn.chenyunlong.qing.domain.permission.service.IPermissionService;
import cn.chenyunlong.qing.domain.permission.updater.PermissionUpdater;
import cn.chenyunlong.qing.domain.permission.vo.PermissionVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("permission/v1")
@RequiredArgsConstructor
public class PermissionController {
    private final IPermissionService permissionService;

    /**
     * createRequest
     */
    @PostMapping("createPermission")
    public JsonObject<Long> createPermission(@RequestBody PermissionCreateRequest request) {
        PermissionCreator creator = PermissionMapper.INSTANCE.request2Dto(request);
        return JsonObject.success(permissionService.createPermission(creator));
    }

    /**
     * update request
     */
    @PostMapping("updatePermission")
    public JsonObject<String> updatePermission(@RequestBody PermissionUpdateRequest request) {
        PermissionUpdater updater = PermissionMapper.INSTANCE.request2Updater(request);
        permissionService.updatePermission(updater);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonObject<String> validPermission(@PathVariable Long id) {
        permissionService.validPermission(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonObject<String> invalidPermission(@PathVariable Long id) {
        permissionService.invalidPermission(id);
        return JsonObject.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonObject<PermissionResponse> findById(@PathVariable Long id) {
        PermissionVO vo = permissionService.findById(id);
        PermissionResponse response = PermissionMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonObject.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonObject<PageResult<PermissionResponse>> findByPage(
            @RequestBody PageRequestWrapper<PermissionQueryRequest> request) {
        PageRequestWrapper<PermissionQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(PermissionMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<PermissionVO> page = permissionService.findByPage(wrapper);
        return JsonObject.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> PermissionMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
