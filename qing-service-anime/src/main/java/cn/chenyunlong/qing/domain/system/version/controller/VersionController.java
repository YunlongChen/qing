/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Qing-Generator ---
package cn.chenyunlong.qing.domain.system.version.controller;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import cn.chenyunlong.qing.domain.system.version.creator.VersionCreator;
import cn.chenyunlong.qing.domain.system.version.mapper.VersionMapper;
import cn.chenyunlong.qing.domain.system.version.query.VersionQuery;
import cn.chenyunlong.qing.domain.system.version.request.VersionCreateRequest;
import cn.chenyunlong.qing.domain.system.version.request.VersionQueryRequest;
import cn.chenyunlong.qing.domain.system.version.request.VersionUpdateRequest;
import cn.chenyunlong.qing.domain.system.version.response.VersionResponse;
import cn.chenyunlong.qing.domain.system.version.service.IVersionService;
import cn.chenyunlong.qing.domain.system.version.updater.VersionUpdater;
import cn.chenyunlong.qing.domain.system.version.vo.VersionVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("version/v1")
@RequiredArgsConstructor
public class VersionController {
    private final IVersionService versionService;

    /**
     * createRequest
     */
    @PostMapping
    public JsonResult<Long> createVersion(@RequestBody VersionCreateRequest request) {
        VersionCreator creator = VersionMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(versionService.createVersion(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateVersion")
    public JsonResult<String> updateVersion(@RequestBody VersionUpdateRequest request) {
        VersionUpdater updater = VersionMapper.INSTANCE.request2Updater(request);
        versionService.updateVersion(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validVersion(@PathVariable Long id) {
        versionService.validVersion(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidVersion(@PathVariable Long id) {
        versionService.invalidVersion(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<VersionResponse> findById(@PathVariable Long id) {
        VersionVO vo = versionService.findById(id);
        VersionResponse response = VersionMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("findByPage")
    public JsonResult<PageResult<VersionResponse>> findByPage(
            @RequestBody PageRequestWrapper<VersionQueryRequest> request) {
        PageRequestWrapper<VersionQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(VersionMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<VersionVO> page = versionService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                        page.getContent().stream()
                                .map(vo -> VersionMapper.INSTANCE.vo2CustomResponse(vo))
                                .collect(Collectors.toList()),
                        page.getTotalElements(),
                        page.getSize(),
                        page.getNumber())
        );
    }
}
