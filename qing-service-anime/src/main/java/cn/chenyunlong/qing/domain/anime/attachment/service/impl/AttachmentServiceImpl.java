/*
 * Copyright (c) 2023  YunLong Chen
 * Project Qing is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 *
 */

// ---Auto Generated by Project Qing ---
package cn.chenyunlong.qing.domain.anime.attachment.service.impl;

import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.jpa.support.EntityOperations;
import cn.chenyunlong.qing.domain.anime.attachment.Attachment;
import cn.chenyunlong.qing.domain.anime.attachment.creator.AttachmentCreator;
import cn.chenyunlong.qing.domain.anime.attachment.mapper.AttachmentMapper;
import cn.chenyunlong.qing.domain.anime.attachment.query.AttachmentQuery;
import cn.chenyunlong.qing.domain.anime.attachment.repository.AttachmentRepository;
import cn.chenyunlong.qing.domain.anime.attachment.service.IAttachmentService;
import cn.chenyunlong.qing.domain.anime.attachment.updater.AttachmentUpdater;
import cn.chenyunlong.qing.domain.anime.attachment.vo.AttachmentVO;
import com.querydsl.core.BooleanBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.stream.Collectors;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class AttachmentServiceImpl implements IAttachmentService {
    private final AttachmentRepository attachmentRepository;

    /**
     * createImpl
     */
    @Override
    public Long createAttachment(AttachmentCreator creator) {
        Optional<Attachment> attachment = EntityOperations.doCreate(attachmentRepository)
                .create(() -> AttachmentMapper.INSTANCE.dtoToEntity(creator))
                .update(e -> e.init())
                .execute();
        return attachment.isPresent() ? attachment.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updateAttachment(AttachmentUpdater updater) {
        EntityOperations.doUpdate(attachmentRepository)
                .loadById(updater.getId())
                .update(e -> updater.updateAttachment(e))
                .execute();
    }

    /**
     * valid
     */
    @Override
    public void validAttachment(Long id) {
        EntityOperations.doUpdate(attachmentRepository)
                .loadById(id)
                .update(e -> e.valid())
                .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidAttachment(Long id) {
        EntityOperations.doUpdate(attachmentRepository)
                .loadById(id)
                .update(e -> e.invalid())
                .execute();
    }

    /**
     * findById
     */
    @Override
    public AttachmentVO findById(Long id) {
        Optional<Attachment> attachment = attachmentRepository.findById(id);
        return new AttachmentVO(attachment.orElseThrow(() -> new BusinessException(CodeEnum.NotFindError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<AttachmentVO> findByPage(PageRequestWrapper<AttachmentQuery> query) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Page<Attachment> page = attachmentRepository.findAll(booleanBuilder,
                PageRequest.of(query.getPage() - 1, query.getPageSize(), Sort.by(
                        Sort.Direction.DESC, "createdAt")));
        return new PageImpl<>(page.getContent()
                .stream().map(AttachmentVO::new)
                .collect(Collectors.toList()), page.getPageable(), page.getTotalElements());
    }
}
